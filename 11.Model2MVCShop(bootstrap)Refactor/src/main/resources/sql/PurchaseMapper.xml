<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--	
	UserMapper.xml :: SQL 를 갖는 MetaData 
	
	- MyBatis Framework 은 XML MetaData 를 사용 SQL구문을 관리
	  (SQL은 xml 을 통해 적절히 캡슐화 되어 애플리케이선 외부로 분리함)
	- SQL문의 입력(?) / 출력(?)을 매핑한다.  <== 아래의 select element 참조
 -->

<mapper namespace="PurchaseMapper">

	<!-- 위의  namespace 이용 Application 에서 UserMapper.~~ 로 아래의 SQL 을 참조  
	 	  :: 아래의 query 수행 후 결과 resultType 에 선언된 User Domain Object 
	 	   	  Field ( property )에 자동연결(?,바인딩)
	 	  :: SQL / Query 의 Alias 와 User Domain Object 의 Field 이름 동일한 것 확인.  -->

   	<resultMap		id="purchaseSelectMap" 			type="com.model2.mvc.service.domain.Purchase">
 		<result		property="tranNo" 				column="tran_no" 			jdbcType="NUMERIC"/>
 		<result 	property="tranId" 				column="tran_id" 			jdbcType="VARCHAR"/>
 		<result 	property="paymentOption" 		column="payment_option" 	jdbcType="VARCHAR"/>
  		<result		property="receiverName" 		column="receiver_name" 		jdbcType="VARCHAR"/>
  		<result 	property="receiverPhone" 		column="receiver_phone" 	jdbcType="VARCHAR"/>
  		<result 	property="divyAddr" 			column="demailaddr" 		jdbcType="VARCHAR"/>
  		<result 	property="divyRequest" 			column="dlvy_request" 		jdbcType="VARCHAR"/>
  		<result 	property="tranCode" 			column="tran_status_code" 	jdbcType="VARCHAR"/>
  		<result 	property="orderDate" 			column="order_data" 		jdbcType="DATE"/>
  		<result 	property="divyDate" 			column="dlvy_date" 			jdbcType="DATE"/>
  		<result 	property="amount" 				column="amount" 			jdbcType="NUMERIC"/>
  		<result 	property="totalPrice" 			column="total_price" 		jdbcType="NUMERIC"/>
  		<result		property="purchaseProd.prodNo"	column="prod_no"			jdbcType="NUMERIC"/>
  		<result 	property="buyer.userId"			column="buyer_id"			jdbcType="VARCHAR"/>
  	</resultMap>
  	
  	<resultMap id="productSelectMap" type="com.model2.mvc.service.domain.Product">
  	</resultMap>
  	
  	<resultMap id="userSelectMap" type="com.model2.mvc.service.domain.User">
  	</resultMap>
	


	<insert id="addPurchase" parameterType="com.model2.mvc.service.domain.Purchase">
		INSERT INTO transaction(tran_no, tran_id, prod_no, buyer_id, payment_option, receiver_name, receiver_phone, demailaddr, dlvy_request, tran_status_code, order_data, dlvy_date, amount, total_price)
		VALUES (seq_transaction_tran_no.NEXTVAL, #{tranId}, #{purchaseProd.prodNo}, #{buyer.userId}, #{paymentOption}, #{receiverName}, #{receiverPhone}, #{divyAddr}, #{divyRequest}, '1', sysdate, #{divyDate}, #{amount}, #{totalPrice})
	</insert>



   	<select id="findPurchase" parameterType="java.lang.Integer" resultMap="purchaseSelectMap">
  		SELECT * FROM transaction WHERE tran_no=#{value}
  	</select>
  	
  	
  	
  	<select id="findPurchaseFromTranId" parameterType="string" resultMap="purchaseSelectMap">
  		SELECT t.tran_no, t.prod_no, t.tran_status_code, p.image_file, p.prod_name, p.prod_detail, p.price, t.buyer_id, t.amount, t.tran_id, t.payment_option, t.receiver_name, t.receiver_phone, t.demailaddr, t.dlvy_request, t.dlvy_date, t.order_data, t.total_price
		FROM product p, transaction t
		WHERE p.prod_no = t.prod_no AND t.tran_id=#{value}
  	</select>


  	
  	<select id="totalCount" parameterType="string" resultType="int">
  		SELECT COUNT(*)
  		FROM ( SELECT * FROM transaction WHERE buyer_id=#{buyer.userId} )
  	</select>


  	
	<select id="getPurchaseList" parameterType="map" resultMap="purchaseSelectMap">
		SELECT *
		FROM ( SELECT ROWNUM r, vt1.*
				FROM ( SELECT *
						FROM transaction
						WHERE buyer_id=#{userId}
						ORDER BY order_data DESC ) vt1 ) vt2
		WHERE r BETWEEN ((#{search.currentPage}-1)*#{search.pageSize}+1) AND #{search.currentPage}*#{search.pageSize}
	</select>
	

				
	<update id="updatePurchase" parameterType="com.model2.mvc.service.domain.Purchase">
		UPDATE transaction
		<set>
			payment_option=#{paymentOption}, receiver_name=#{receiverName},
			receiver_phone=#{receiverPhone}, demailaddr=#{divyAddr}, dlvy_request=#{divyRequest},
			dlvy_date=#{divyDate}, amount=#{amount}
		</set>
		 WHERE tran_no=#{tranNo}
	</update>


				
	<update id="updateTranCode" parameterType="map">
		UPDATE transaction
		<set>
			tran_status_code=#{tranCode}
		</set>
		<where>
			<!-- user계정 : 배송중->배송완료 : 구매번호, 상태코드=3 -->
			<if test="tranNo != 0">
				tran_no=#{tranNo}
			</if>
			<if test="prodNo != 0">
				prod_no=#{prodNo}
			</if>
			<!-- admin계정 : 구매완료->배송중 : 상품번호, 상태코드=2 -->
		</where>
	</update>

</mapper>